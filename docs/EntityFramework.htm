<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Entity Framework Integration - Tortuga Chain</title>
    <link rel="shortcut icon" href="favicon.ico">
    <link rel="stylesheet" href="css/theme.css" type="text/css" />
    <link rel="stylesheet" href="css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="css/styles/vs.css">
    <link rel="stylesheet" href="css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="index.htm"><i class="fa fa-home"></i> Tortuga Chain</a>
                <div role="search">
                    <form id="search-form" class="form" action="Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="Introduction.htm">Home</a>
</li>

<li class="tocentry"><a href="DataSources.htm">Data Sources</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="CommandBuilders.htm">Command Builders</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="Materializers.htm">Materializers</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="Appenders.htm">Appenders</a></span>
</li>
<li class="tocentry"><a href="AuditRules.htm">Audit Rules</a>
</li>
<li class="tocentry"><a href="RestrictedColumns.htm">Restricted Columns</a>
</li>
<li class="tocentry"><a href="Transactions.htm">Transactions</a>
</li>
<li class="tocentry"><a href="MasterDetail.htm">Master/Detail</a>
</li>
<li class="tocentry current"><a class="current" href="EntityFramework.htm">Entity Framework Integration</a>
<ul class="currentrelativeroot">
<li class="tocentry"><a href="#chainforentityframework-class">ChainForEntityFramework Class</a></li>
</ul>
<li class="tocentry"><a href="NHibernate.htm">NHibernate Integration</a>
</li>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="index.htm">Tortuga Chain</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="Introduction.htm">Home</a></li> / <li><a href="EntityFramework.htm">Entity Framework Integration</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="entity-framework-integration">Entity Framework Integration<a class="headerlink" href="#entity-framework-integration" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>Chain can be combined with Entity Framework (EF) using the <code>ChainForEntityFramework</code> extension.</p>
<p>To use <code>ChainForEntityFramework</code>, first include the code at the botom of this page in your project. </p>
<p>You'll need to register a Chain data source with a DbContext. Or more accurately, you are registering the DbContext's connection string. Normally you would do this at startup using a DbContext that you then discard.</p>
<p>Once you have done that, you may invoke Chain methods from the DbContext as shown.</p>
<pre><code>DbContext context = [...]
context.Chain().From(...)
</code></pre>

<p>If your <code>DbContext</code> is currently participating in a transaction, any operations that Chain performs will also particpate in the transaction.</p>
<p>Do not cache the results of <code>DbContext.Chain</code>. The context will occasionally close the connection and calling <code>.Chain()</code> will reopen it if necessary. </p>
<h2 id="chainforentityframework-class">ChainForEntityFramework Class<a class="headerlink" href="#chainforentityframework-class" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="csharp">    public static class ChainForEntityFramework
    {
        static ConcurrentDictionary&lt;string, IRootDataSource&gt; s_DataSources = new ConcurrentDictionary&lt;string, IRootDataSource&gt;();

        /// &lt;summary&gt;
        /// Registers the data source.
        /// &lt;/summary&gt;
        /// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;
        /// &lt;param name=&quot;context&quot;&gt;An example context. Really the connection string is what's being registered.&lt;/param&gt;
        /// &lt;param name=&quot;dataSource&quot;&gt;The data source.&lt;/param&gt;
        public static void RegisterDataSource&lt;T&gt;(this DbContext context, T dataSource) where T : IRootDataSource, IClass2DataSource
        {
            s_DataSources[context.Database.Connection.ConnectionString] = dataSource;
        }

        /// &lt;summary&gt;
        /// Registers the data source.
        /// &lt;/summary&gt;
        /// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;
        /// &lt;param name=&quot;context&quot;&gt;An example context. Really the connection string is what's being registered.&lt;/param&gt;
        /// &lt;param name=&quot;dataSourceFactory&quot;&gt;The data source factory.&lt;/param&gt;
        public static void RegisterDataSource&lt;T&gt;(this DbContext context, Func&lt;string, T&gt; dataSourceFactory) where T : IRootDataSource, IClass2DataSource
        {
            s_DataSources[context.Database.Connection.ConnectionString] = dataSourceFactory(context.Database.Connection.ConnectionString);
        }

        public static IClass2DataSource Chain(this DbContext context)
        {
            var connection = context.Database.Connection;
            var transaction = context.Database.CurrentTransaction?.UnderlyingTransaction;

            //If context.SaveChanges is called, the connection will be immediately closed.
            if (connection.State == ConnectionState.Closed)
                connection.Open();

            return (IClass2DataSource)s_DataSources[context.Database.Connection.ConnectionString].CreateOpenDataSource(connection, transaction);
        }

    }
</code></pre>


                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">
Tortuga Chain. <a href='https://github.com/TortugaResearch/Tortuga.Chain/' target='_blank'>Visit us at GitHub</a>.
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="js/jquery-2.1.1.min.js"></script>
    <script src="js/modernizr-2.8.3.min.js"></script>
    <script src="js/highlight.pack.js"></script>
    <script src="js/theme.js"></script>

</body>
</html>

//This file was generated by Tortuga Shipwright

namespace Tortuga.Chain.MySql
{
	partial class MySqlDataSourceBase: Tortuga.Chain.DataSources.ISupportsDeleteAll, Tortuga.Chain.DataSources.ISupportsTruncate, Tortuga.Chain.DataSources.ISupportsSqlQueries, Tortuga.Chain.DataSources.ISupportsInsertBatch, Tortuga.Chain.DataSources.ISupportsDeleteByKeyList, Tortuga.Chain.DataSources.ISupportsDeleteByKey, Tortuga.Chain.DataSources.ISupportsUpdate, Tortuga.Chain.DataSources.ISupportsDelete, Tortuga.Chain.DataSources.ISupportsUpdateByKey, Tortuga.Chain.DataSources.ISupportsUpdateByKeyList, Tortuga.Chain.DataSources.ISupportsInsert, Tortuga.Chain.DataSources.ISupportsUpdateSet, Tortuga.Chain.DataSources.ISupportsDeleteSet, Tortuga.Chain.DataSources.ISupportsFrom, Tortuga.Chain.DataSources.ISupportsGetByKeyList, Tortuga.Chain.DataSources.ISupportsGetByKey, Tortuga.Chain.DataSources.ISupportsUpsert, Tortuga.Chain.DataSources.ISupportsInsertBulk, Tortuga.Chain.DataSources.ISupportsScalarFunction, Tortuga.Chain.DataSources.ISupportsProcedure, Traits.ICommandHelper<Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>, Traits.IInsertBatchHelper<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>, Traits.IUpdateDeleteByKeyHelper<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>, Traits.IUpdateDeleteHelper<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>, Traits.IInsertHelper<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>, Traits.IUpdateDeleteSetHelper<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>, Traits.IFromHelper<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType, Tortuga.Chain.MySqlLimitOption>, Traits.IGetByKeyHelper<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>, Traits.IUpsertHelper<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>, Traits.IInsertBulkHelper<Tortuga.Chain.MySql.CommandBuilders.MySqlInsertBulk, MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>, Traits.ICommandHelper<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>
	{

		private bool __TraitsRegistered;

		// These fields and/or properties hold the traits. They should not be referenced directly.
		private Traits.SupportsDeleteAllTrait<Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> ___Trait0 = new();
		private Traits.SupportsDeleteAllTrait<Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> __Trait0
		{
			get
			{
				if (!__TraitsRegistered) __RegisterTraits();
				return ___Trait0;
			}
		}
		private Traits.SupportsTruncateTrait<Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> ___Trait1 = new();
		private Traits.SupportsTruncateTrait<Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> __Trait1
		{
			get
			{
				if (!__TraitsRegistered) __RegisterTraits();
				return ___Trait1;
			}
		}
		private Traits.SupportsSqlQueriesTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> ___Trait2 = new();
		private Traits.SupportsSqlQueriesTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> __Trait2
		{
			get
			{
				if (!__TraitsRegistered) __RegisterTraits();
				return ___Trait2;
			}
		}
		private Traits.SupportsInsertBatchTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType, Tortuga.Chain.CommandBuilders.DbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter>> ___Trait3 = new();
		private Traits.SupportsInsertBatchTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType, Tortuga.Chain.CommandBuilders.DbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter>> __Trait3
		{
			get
			{
				if (!__TraitsRegistered) __RegisterTraits();
				return ___Trait3;
			}
		}
		private Traits.SupportsDeleteByKeyListTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> ___Trait4 = new();
		private Traits.SupportsDeleteByKeyListTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> __Trait4
		{
			get
			{
				if (!__TraitsRegistered) __RegisterTraits();
				return ___Trait4;
			}
		}
		private Traits.SupportsUpdateTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> ___Trait5 = new();
		private Traits.SupportsUpdateTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> __Trait5
		{
			get
			{
				if (!__TraitsRegistered) __RegisterTraits();
				return ___Trait5;
			}
		}
		private Traits.SupportsDeleteTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> ___Trait6 = new();
		private Traits.SupportsDeleteTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> __Trait6
		{
			get
			{
				if (!__TraitsRegistered) __RegisterTraits();
				return ___Trait6;
			}
		}
		private Traits.SupportsUpdateByKeyListTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> ___Trait7 = new();
		private Traits.SupportsUpdateByKeyListTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> __Trait7
		{
			get
			{
				if (!__TraitsRegistered) __RegisterTraits();
				return ___Trait7;
			}
		}
		private Traits.SupportsInsertTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> ___Trait8 = new();
		private Traits.SupportsInsertTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> __Trait8
		{
			get
			{
				if (!__TraitsRegistered) __RegisterTraits();
				return ___Trait8;
			}
		}
		private Traits.SupportsUpdateSet<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> ___Trait9 = new();
		private Traits.SupportsUpdateSet<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> __Trait9
		{
			get
			{
				if (!__TraitsRegistered) __RegisterTraits();
				return ___Trait9;
			}
		}
		private Traits.SupportsDeleteSet<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> ___Trait10 = new();
		private Traits.SupportsDeleteSet<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> __Trait10
		{
			get
			{
				if (!__TraitsRegistered) __RegisterTraits();
				return ___Trait10;
			}
		}
		private Traits.SupportsFromTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType, Tortuga.Chain.MySqlLimitOption> ___Trait11 = new();
		private Traits.SupportsFromTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType, Tortuga.Chain.MySqlLimitOption> __Trait11
		{
			get
			{
				if (!__TraitsRegistered) __RegisterTraits();
				return ___Trait11;
			}
		}
		private Traits.SupportsGetByKeyListTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> ___Trait12 = new();
		private Traits.SupportsGetByKeyListTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> __Trait12
		{
			get
			{
				if (!__TraitsRegistered) __RegisterTraits();
				return ___Trait12;
			}
		}
		private Traits.SupportsUpsertTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> ___Trait13 = new();
		private Traits.SupportsUpsertTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> __Trait13
		{
			get
			{
				if (!__TraitsRegistered) __RegisterTraits();
				return ___Trait13;
			}
		}
		private Traits.SupportsInsertBulkTrait<Tortuga.Chain.MySql.CommandBuilders.MySqlInsertBulk, MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> ___Trait14 = new();
		private Traits.SupportsInsertBulkTrait<Tortuga.Chain.MySql.CommandBuilders.MySqlInsertBulk, MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> __Trait14
		{
			get
			{
				if (!__TraitsRegistered) __RegisterTraits();
				return ___Trait14;
			}
		}
		private Traits.SupportsScalarFunctionTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> ___Trait15 = new();
		private Traits.SupportsScalarFunctionTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> __Trait15
		{
			get
			{
				if (!__TraitsRegistered) __RegisterTraits();
				return ___Trait15;
			}
		}
		private Traits.SupportsProcedureTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> ___Trait16 = new();
		private Traits.SupportsProcedureTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType> __Trait16
		{
			get
			{
				if (!__TraitsRegistered) __RegisterTraits();
				return ___Trait16;
			}
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsDelete
		Tortuga.Chain.CommandBuilders.IObjectDbCommandBuilder<TArgument> Tortuga.Chain.DataSources.ISupportsDelete.Delete<TArgument>(System.String tableName, TArgument argumentValue, Tortuga.Chain.DeleteOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsDelete)__Trait6).Delete<TArgument>(tableName, argumentValue, options);
		}

		Tortuga.Chain.CommandBuilders.IObjectDbCommandBuilder<TArgument> Tortuga.Chain.DataSources.ISupportsDelete.Delete<TArgument>(TArgument argumentValue, Tortuga.Chain.DeleteOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsDelete)__Trait6).Delete<TArgument>(argumentValue, options);
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsDeleteAll
		Tortuga.Chain.ILink<int?> Tortuga.Chain.DataSources.ISupportsDeleteAll.DeleteAll(System.String tableName)
		{
			return ((Tortuga.Chain.DataSources.ISupportsDeleteAll)__Trait0).DeleteAll(tableName);
		}

		Tortuga.Chain.ILink<int?> Tortuga.Chain.DataSources.ISupportsDeleteAll.DeleteAll<TObject>()
		{
			return ((Tortuga.Chain.DataSources.ISupportsDeleteAll)__Trait0).DeleteAll<TObject>();
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsDeleteByKey
		Tortuga.Chain.CommandBuilders.ISingleRowDbCommandBuilder Tortuga.Chain.DataSources.ISupportsDeleteByKey.DeleteByKey<TKey>(System.String tableName, TKey key, Tortuga.Chain.DeleteOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsDeleteByKey)__Trait4).DeleteByKey<TKey>(tableName, key, options);
		}

		Tortuga.Chain.CommandBuilders.ISingleRowDbCommandBuilder Tortuga.Chain.DataSources.ISupportsDeleteByKey.DeleteByKey(System.String tableName, System.String key, Tortuga.Chain.DeleteOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsDeleteByKey)__Trait4).DeleteByKey(tableName, key, options);
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsDeleteByKeyList
		Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder Tortuga.Chain.DataSources.ISupportsDeleteByKeyList.DeleteByKeyList<TKey>(System.String tableName, System.Collections.Generic.IEnumerable<TKey> keys, Tortuga.Chain.DeleteOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsDeleteByKeyList)__Trait4).DeleteByKeyList<TKey>(tableName, keys, options);
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsDeleteSet
		Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder Tortuga.Chain.DataSources.ISupportsDeleteSet.DeleteSet(System.String tableName, System.String whereClause)
		{
			return ((Tortuga.Chain.DataSources.ISupportsDeleteSet)__Trait10).DeleteSet(tableName, whereClause);
		}

		Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder Tortuga.Chain.DataSources.ISupportsDeleteSet.DeleteSet(System.String tableName, System.String whereClause, System.Object? argumentValue)
		{
			return ((Tortuga.Chain.DataSources.ISupportsDeleteSet)__Trait10).DeleteSet(tableName, whereClause, argumentValue);
		}

		Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder Tortuga.Chain.DataSources.ISupportsDeleteSet.DeleteSet(System.String tableName, System.Object filterValue, Tortuga.Chain.FilterOptions filterOptions)
		{
			return ((Tortuga.Chain.DataSources.ISupportsDeleteSet)__Trait10).DeleteSet(tableName, filterValue, filterOptions);
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsFrom
		Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder Tortuga.Chain.DataSources.ISupportsFrom.From(System.String tableOrViewName)
		{
			return ((Tortuga.Chain.DataSources.ISupportsFrom)__Trait11).From(tableOrViewName);
		}

		Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder Tortuga.Chain.DataSources.ISupportsFrom.From(System.String tableOrViewName, System.String whereClause)
		{
			return ((Tortuga.Chain.DataSources.ISupportsFrom)__Trait11).From(tableOrViewName, whereClause);
		}

		Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder Tortuga.Chain.DataSources.ISupportsFrom.From(System.String tableOrViewName, System.String whereClause, System.Object argumentValue)
		{
			return ((Tortuga.Chain.DataSources.ISupportsFrom)__Trait11).From(tableOrViewName, whereClause, argumentValue);
		}

		Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder Tortuga.Chain.DataSources.ISupportsFrom.From(System.String tableOrViewName, System.Object filterValue, Tortuga.Chain.FilterOptions filterOptions)
		{
			return ((Tortuga.Chain.DataSources.ISupportsFrom)__Trait11).From(tableOrViewName, filterValue, filterOptions);
		}

		Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder<TObject> Tortuga.Chain.DataSources.ISupportsFrom.From<TObject>()
		{
			return ((Tortuga.Chain.DataSources.ISupportsFrom)__Trait11).From<TObject>();
		}

		Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder<TObject> Tortuga.Chain.DataSources.ISupportsFrom.From<TObject>(System.String whereClause)
		{
			return ((Tortuga.Chain.DataSources.ISupportsFrom)__Trait11).From<TObject>(whereClause);
		}

		Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder<TObject> Tortuga.Chain.DataSources.ISupportsFrom.From<TObject>(System.String whereClause, System.Object argumentValue)
		{
			return ((Tortuga.Chain.DataSources.ISupportsFrom)__Trait11).From<TObject>(whereClause, argumentValue);
		}

		Tortuga.Chain.CommandBuilders.ITableDbCommandBuilder<TObject> Tortuga.Chain.DataSources.ISupportsFrom.From<TObject>(System.Object filterValue)
		{
			return ((Tortuga.Chain.DataSources.ISupportsFrom)__Trait11).From<TObject>(filterValue);
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsGetByKey
		Tortuga.Chain.CommandBuilders.ISingleRowDbCommandBuilder Tortuga.Chain.DataSources.ISupportsGetByKey.GetByKey<TKey>(System.String tableName, TKey key)
		{
			return ((Tortuga.Chain.DataSources.ISupportsGetByKey)__Trait12).GetByKey<TKey>(tableName, key);
		}

		Tortuga.Chain.CommandBuilders.ISingleRowDbCommandBuilder Tortuga.Chain.DataSources.ISupportsGetByKey.GetByKey(System.String tableName, System.String key)
		{
			return ((Tortuga.Chain.DataSources.ISupportsGetByKey)__Trait12).GetByKey(tableName, key);
		}

		Tortuga.Chain.CommandBuilders.ISingleRowDbCommandBuilder<TObject> Tortuga.Chain.DataSources.ISupportsGetByKey.GetByKey<TObject, TKey>(TKey key)
		{
			return ((Tortuga.Chain.DataSources.ISupportsGetByKey)__Trait12).GetByKey<TObject, TKey>(key);
		}

		Tortuga.Chain.CommandBuilders.ISingleRowDbCommandBuilder<TObject> Tortuga.Chain.DataSources.ISupportsGetByKey.GetByKey<TObject>(System.String key)
		{
			return ((Tortuga.Chain.DataSources.ISupportsGetByKey)__Trait12).GetByKey<TObject>(key);
		}

		Tortuga.Chain.CommandBuilders.ISingleRowDbCommandBuilder<TObject> Tortuga.Chain.DataSources.ISupportsGetByKey.GetByKey<TObject>(System.Int16 key)
		{
			return ((Tortuga.Chain.DataSources.ISupportsGetByKey)__Trait12).GetByKey<TObject>(key);
		}

		Tortuga.Chain.CommandBuilders.ISingleRowDbCommandBuilder<TObject> Tortuga.Chain.DataSources.ISupportsGetByKey.GetByKey<TObject>(System.Int32 key)
		{
			return ((Tortuga.Chain.DataSources.ISupportsGetByKey)__Trait12).GetByKey<TObject>(key);
		}

		Tortuga.Chain.CommandBuilders.ISingleRowDbCommandBuilder<TObject> Tortuga.Chain.DataSources.ISupportsGetByKey.GetByKey<TObject>(System.Int64 key)
		{
			return ((Tortuga.Chain.DataSources.ISupportsGetByKey)__Trait12).GetByKey<TObject>(key);
		}

		Tortuga.Chain.CommandBuilders.ISingleRowDbCommandBuilder<TObject> Tortuga.Chain.DataSources.ISupportsGetByKey.GetByKey<TObject>(System.Guid key)
		{
			return ((Tortuga.Chain.DataSources.ISupportsGetByKey)__Trait12).GetByKey<TObject>(key);
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsGetByKeyList
		Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder Tortuga.Chain.DataSources.ISupportsGetByKeyList.GetByKeyList<TKey>(System.String tableName, System.Collections.Generic.IEnumerable<TKey> keys)
		{
			return ((Tortuga.Chain.DataSources.ISupportsGetByKeyList)__Trait12).GetByKeyList<TKey>(tableName, keys);
		}

		Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder<TObject> Tortuga.Chain.DataSources.ISupportsGetByKeyList.GetByKeyList<TObject, TKey>(System.Collections.Generic.IEnumerable<TKey> keys)
		{
			return ((Tortuga.Chain.DataSources.ISupportsGetByKeyList)__Trait12).GetByKeyList<TObject, TKey>(keys);
		}

		Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder<TObject> Tortuga.Chain.DataSources.ISupportsGetByKeyList.GetByKeyList<TObject>(System.Collections.Generic.IEnumerable<short> keys)
		{
			return ((Tortuga.Chain.DataSources.ISupportsGetByKeyList)__Trait12).GetByKeyList<TObject>(keys);
		}

		Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder<TObject> Tortuga.Chain.DataSources.ISupportsGetByKeyList.GetByKeyList<TObject>(System.Collections.Generic.IEnumerable<int> keys)
		{
			return ((Tortuga.Chain.DataSources.ISupportsGetByKeyList)__Trait12).GetByKeyList<TObject>(keys);
		}

		Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder<TObject> Tortuga.Chain.DataSources.ISupportsGetByKeyList.GetByKeyList<TObject>(System.Collections.Generic.IEnumerable<long> keys)
		{
			return ((Tortuga.Chain.DataSources.ISupportsGetByKeyList)__Trait12).GetByKeyList<TObject>(keys);
		}

		Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder<TObject> Tortuga.Chain.DataSources.ISupportsGetByKeyList.GetByKeyList<TObject>(System.Collections.Generic.IEnumerable<System.Guid> keys)
		{
			return ((Tortuga.Chain.DataSources.ISupportsGetByKeyList)__Trait12).GetByKeyList<TObject>(keys);
		}

		[System.Obsolete(@"This will be replaced by GetByColumn")]
		[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
		Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder Tortuga.Chain.DataSources.ISupportsGetByKeyList.GetByKeyList<TKey>(System.String tableName, System.String keyColumn, System.Collections.Generic.IEnumerable<TKey> keys)
		{
			return ((Tortuga.Chain.DataSources.ISupportsGetByKeyList)__Trait12).GetByKeyList<TKey>(tableName, keyColumn, keys);
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsInsert
		Tortuga.Chain.CommandBuilders.IObjectDbCommandBuilder<TArgument> Tortuga.Chain.DataSources.ISupportsInsert.Insert<TArgument>(System.String tableName, TArgument argumentValue, Tortuga.Chain.InsertOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsInsert)__Trait8).Insert<TArgument>(tableName, argumentValue, options);
		}

		Tortuga.Chain.CommandBuilders.IObjectDbCommandBuilder<TArgument> Tortuga.Chain.DataSources.ISupportsInsert.Insert<TArgument>(TArgument argumentValue, Tortuga.Chain.InsertOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsInsert)__Trait8).Insert<TArgument>(argumentValue, options);
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsInsertBatch
		Tortuga.Chain.CommandBuilders.IDbCommandBuilder Tortuga.Chain.DataSources.ISupportsInsertBatch.InsertBatch<TObject>(System.Collections.Generic.IEnumerable<TObject> objects, Tortuga.Chain.InsertOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsInsertBatch)__Trait3).InsertBatch<TObject>(objects, options);
		}

		Tortuga.Chain.ILink<int> Tortuga.Chain.DataSources.ISupportsInsertBatch.InsertMultipleBatch<TObject>(System.String tableName, System.Collections.Generic.IReadOnlyList<TObject> objects, Tortuga.Chain.InsertOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsInsertBatch)__Trait3).InsertMultipleBatch<TObject>(tableName, objects, options);
		}

		Tortuga.Chain.ILink<int> Tortuga.Chain.DataSources.ISupportsInsertBatch.InsertMultipleBatch<TObject>(System.Collections.Generic.IReadOnlyList<TObject> objects, Tortuga.Chain.InsertOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsInsertBatch)__Trait3).InsertMultipleBatch<TObject>(objects, options);
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsInsertBulk
		Tortuga.Chain.ILink<int> Tortuga.Chain.DataSources.ISupportsInsertBulk.InsertBulk(System.String tableName, System.Data.DataTable dataTable)
		{
			return ((Tortuga.Chain.DataSources.ISupportsInsertBulk)__Trait14).InsertBulk(tableName, dataTable);
		}

		Tortuga.Chain.ILink<int> Tortuga.Chain.DataSources.ISupportsInsertBulk.InsertBulk(System.String tableName, System.Data.IDataReader dataReader)
		{
			return ((Tortuga.Chain.DataSources.ISupportsInsertBulk)__Trait14).InsertBulk(tableName, dataReader);
		}

		Tortuga.Chain.ILink<int> Tortuga.Chain.DataSources.ISupportsInsertBulk.InsertBulk<TObject>(System.String tableName, System.Collections.Generic.IEnumerable<TObject> objects)
		{
			return ((Tortuga.Chain.DataSources.ISupportsInsertBulk)__Trait14).InsertBulk<TObject>(tableName, objects);
		}

		Tortuga.Chain.ILink<int> Tortuga.Chain.DataSources.ISupportsInsertBulk.InsertBulk<TObject>(System.Data.DataTable dataTable)
		{
			return ((Tortuga.Chain.DataSources.ISupportsInsertBulk)__Trait14).InsertBulk<TObject>(dataTable);
		}

		Tortuga.Chain.ILink<int> Tortuga.Chain.DataSources.ISupportsInsertBulk.InsertBulk<TObject>(System.Data.IDataReader dataReader)
		{
			return ((Tortuga.Chain.DataSources.ISupportsInsertBulk)__Trait14).InsertBulk<TObject>(dataReader);
		}

		Tortuga.Chain.ILink<int> Tortuga.Chain.DataSources.ISupportsInsertBulk.InsertBulk<TObject>(System.Collections.Generic.IEnumerable<TObject> objects)
		{
			return ((Tortuga.Chain.DataSources.ISupportsInsertBulk)__Trait14).InsertBulk<TObject>(objects);
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsProcedure
		Tortuga.Chain.CommandBuilders.IProcedureDbCommandBuilder Tortuga.Chain.DataSources.ISupportsProcedure.Procedure(System.String procedureName)
		{
			return ((Tortuga.Chain.DataSources.ISupportsProcedure)__Trait16).Procedure(procedureName);
		}

		Tortuga.Chain.CommandBuilders.IProcedureDbCommandBuilder Tortuga.Chain.DataSources.ISupportsProcedure.Procedure(System.String procedureName, System.Object argumentValue)
		{
			return ((Tortuga.Chain.DataSources.ISupportsProcedure)__Trait16).Procedure(procedureName, argumentValue);
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsScalarFunction
		Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder Tortuga.Chain.DataSources.ISupportsScalarFunction.ScalarFunction(System.String scalarFunctionName)
		{
			return ((Tortuga.Chain.DataSources.ISupportsScalarFunction)__Trait15).ScalarFunction(scalarFunctionName);
		}

		Tortuga.Chain.CommandBuilders.IScalarDbCommandBuilder Tortuga.Chain.DataSources.ISupportsScalarFunction.ScalarFunction(System.String scalarFunctionName, System.Object functionArgumentValue)
		{
			return ((Tortuga.Chain.DataSources.ISupportsScalarFunction)__Trait15).ScalarFunction(scalarFunctionName, functionArgumentValue);
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsSqlQueries
		Tortuga.Chain.CommandBuilders.IMultipleTableDbCommandBuilder Tortuga.Chain.DataSources.ISupportsSqlQueries.Sql(System.String sqlStatement, System.Object argumentValue)
		{
			return ((Tortuga.Chain.DataSources.ISupportsSqlQueries)__Trait2).Sql(sqlStatement, argumentValue);
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsTruncate
		Tortuga.Chain.ILink<int?> Tortuga.Chain.DataSources.ISupportsTruncate.Truncate(System.String tableName)
		{
			return ((Tortuga.Chain.DataSources.ISupportsTruncate)__Trait1).Truncate(tableName);
		}

		Tortuga.Chain.ILink<int?> Tortuga.Chain.DataSources.ISupportsTruncate.Truncate<TObject>()
		{
			return ((Tortuga.Chain.DataSources.ISupportsTruncate)__Trait1).Truncate<TObject>();
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsUpdate
		Tortuga.Chain.CommandBuilders.IObjectDbCommandBuilder<TArgument> Tortuga.Chain.DataSources.ISupportsUpdate.Update<TArgument>(System.String tableName, TArgument argumentValue, Tortuga.Chain.UpdateOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsUpdate)__Trait5).Update<TArgument>(tableName, argumentValue, options);
		}

		Tortuga.Chain.CommandBuilders.IObjectDbCommandBuilder<TArgument> Tortuga.Chain.DataSources.ISupportsUpdate.Update<TArgument>(TArgument argumentValue, Tortuga.Chain.UpdateOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsUpdate)__Trait5).Update<TArgument>(argumentValue, options);
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsUpdateByKey
		Tortuga.Chain.CommandBuilders.ISingleRowDbCommandBuilder Tortuga.Chain.DataSources.ISupportsUpdateByKey.UpdateByKey<TArgument, TKey>(System.String tableName, TArgument newValues, TKey key, Tortuga.Chain.UpdateOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsUpdateByKey)__Trait7).UpdateByKey<TArgument, TKey>(tableName, newValues, key, options);
		}

		Tortuga.Chain.CommandBuilders.ISingleRowDbCommandBuilder Tortuga.Chain.DataSources.ISupportsUpdateByKey.UpdateByKey<TArgument>(System.String tableName, TArgument newValues, System.String key, Tortuga.Chain.UpdateOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsUpdateByKey)__Trait7).UpdateByKey<TArgument>(tableName, newValues, key, options);
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsUpdateByKeyList
		Tortuga.Chain.CommandBuilders.IMultipleRowDbCommandBuilder Tortuga.Chain.DataSources.ISupportsUpdateByKeyList.UpdateByKeyList<TArgument, TKey>(System.String tableName, TArgument newValues, System.Collections.Generic.IEnumerable<TKey> keys, Tortuga.Chain.UpdateOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsUpdateByKeyList)__Trait7).UpdateByKeyList<TArgument, TKey>(tableName, newValues, keys, options);
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsUpdateSet
		Tortuga.Chain.CommandBuilders.IUpdateSetDbCommandBuilder Tortuga.Chain.DataSources.ISupportsUpdateSet.UpdateSet(System.String tableName, System.String updateExpression, Tortuga.Chain.UpdateOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsUpdateSet)__Trait9).UpdateSet(tableName, updateExpression, options);
		}

		Tortuga.Chain.CommandBuilders.IUpdateSetDbCommandBuilder Tortuga.Chain.DataSources.ISupportsUpdateSet.UpdateSet(System.String tableName, System.String updateExpression, System.Object? updateArgumentValue, Tortuga.Chain.UpdateOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsUpdateSet)__Trait9).UpdateSet(tableName, updateExpression, updateArgumentValue, options);
		}

		Tortuga.Chain.CommandBuilders.IUpdateSetDbCommandBuilder Tortuga.Chain.DataSources.ISupportsUpdateSet.UpdateSet(System.String tableName, System.Object newValues, Tortuga.Chain.UpdateOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsUpdateSet)__Trait9).UpdateSet(tableName, newValues, options);
		}

		// Explicit interface implementation Tortuga.Chain.DataSources.ISupportsUpsert
		Tortuga.Chain.CommandBuilders.IObjectDbCommandBuilder<TArgument> Tortuga.Chain.DataSources.ISupportsUpsert.Upsert<TArgument>(System.String tableName, TArgument argumentValue, Tortuga.Chain.UpsertOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsUpsert)__Trait13).Upsert<TArgument>(tableName, argumentValue, options);
		}

		Tortuga.Chain.CommandBuilders.IObjectDbCommandBuilder<TArgument> Tortuga.Chain.DataSources.ISupportsUpsert.Upsert<TArgument>(TArgument argumentValue, Tortuga.Chain.UpsertOptions options)
		{
			return ((Tortuga.Chain.DataSources.ISupportsUpsert)__Trait13).Upsert<TArgument>(argumentValue, options);
		}

		// Exposing trait Traits.SupportsDeleteAllTrait<Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>

		/// <summary>Deletes all records in the specified table.</summary>
		/// <param name="tableName">Name of the table to clear.</param>
		/// <returns>The number of rows deleted or null if the database doesn't provide that information.</returns>
		public Tortuga.Chain.ILink<int?> DeleteAll(Tortuga.Chain.MySql.MySqlObjectName tableName)
		{
			return __Trait0.DeleteAll(tableName);
		}

		/// <summary>Deletes all records in the specified table.</summary>
		/// <typeparam name="TObject">This class used to determine which table to clear</typeparam>
		/// <returns>The number of rows deleted or null if the database doesn't provide that information.</returns>
		public Tortuga.Chain.ILink<int?> DeleteAll<TObject>()where TObject : class
		{
			return __Trait0.DeleteAll<TObject>();
		}

		// Exposing trait Traits.SupportsDeleteByKeyListTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>

		/// <summary>
		/// Delete a record by its primary key.
		/// </summary>
		/// <typeparam name="T"></typeparam>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="key">The key.</param>
		/// <param name="options">The options.</param>
		/// <returns>MultipleRowDbCommandBuilder&lt;TCommand, TParameter&gt;.</returns>
		public Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> DeleteByKey<T>(Tortuga.Chain.MySql.MySqlObjectName tableName, T key, Tortuga.Chain.DeleteOptions options = 0)where T : struct
		{
			return __Trait4.DeleteByKey<T>(tableName, key, options);
		}

		/// <summary>
		/// Delete a record by its primary key.
		/// </summary>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="key">The key.</param>
		/// <param name="options">The options.</param>
		public Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> DeleteByKey(Tortuga.Chain.MySql.MySqlObjectName tableName, System.String key, Tortuga.Chain.DeleteOptions options = 0)
		{
			return __Trait4.DeleteByKey(tableName, key, options);
		}

		/// <summary>
		/// Delete a record by its primary key.
		/// </summary>
		/// <typeparam name="TObject">Used to determine the table name</typeparam>
		/// <param name="key">The key.</param>
		/// <param name="options">The options.</param>
		public Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> DeleteByKey<TObject>(System.Guid key, Tortuga.Chain.DeleteOptions options = 0)where TObject : class
		{
			return __Trait4.DeleteByKey<TObject>(key, options);
		}

		/// <summary>
		/// Delete a record by its primary key.
		/// </summary>
		/// <typeparam name="TObject">Used to determine the table name</typeparam>
		/// <param name="key">The key.</param>
		/// <param name="options">The options.</param>
		public Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> DeleteByKey<TObject>(System.Int64 key, Tortuga.Chain.DeleteOptions options = 0)where TObject : class
		{
			return __Trait4.DeleteByKey<TObject>(key, options);
		}

		/// <summary>
		/// Delete a record by its primary key.
		/// </summary>
		/// <typeparam name="TObject">Used to determine the table name</typeparam>
		/// <param name="key">The key.</param>
		/// <param name="options">The options.</param>
		public Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> DeleteByKey<TObject>(System.Int32 key, Tortuga.Chain.DeleteOptions options = 0)where TObject : class
		{
			return __Trait4.DeleteByKey<TObject>(key, options);
		}

		/// <summary>
		/// Delete a record by its primary key.
		/// </summary>
		/// <typeparam name="TObject">Used to determine the table name</typeparam>
		/// <param name="key">The key.</param>
		/// <param name="options">The options.</param>
		public Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> DeleteByKey<TObject>(System.String key, Tortuga.Chain.DeleteOptions options = 0)where TObject : class
		{
			return __Trait4.DeleteByKey<TObject>(key, options);
		}

		/// <summary>
		/// Delete multiple rows by key.
		/// </summary>
		/// <typeparam name="TKey">The type of the t key.</typeparam>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="keys">The keys.</param>
		/// <param name="options">Delete options.</param>
		/// <exception cref="T:Tortuga.Chain.MappingException"></exception>
		public Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> DeleteByKeyList<TKey>(Tortuga.Chain.MySql.MySqlObjectName tableName, System.Collections.Generic.IEnumerable<TKey> keys, Tortuga.Chain.DeleteOptions options = 0)
		{
			return __Trait4.DeleteByKeyList<TKey>(tableName, keys, options);
		}

		// Exposing trait Traits.SupportsDeleteSet<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>

		/// <summary>
		/// Delete multiple records using a filter object.
		/// </summary>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="filterValue">The filter value.</param>
		/// <param name="filterOptions">The options.</param>
		public Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> DeleteSet(Tortuga.Chain.MySql.MySqlObjectName tableName, System.Object filterValue, Tortuga.Chain.FilterOptions filterOptions = 0)
		{
			return __Trait10.DeleteSet(tableName, filterValue, filterOptions);
		}

		/// <summary>
		/// Delete multiple records using a filter object.
		/// </summary>
		/// <param name="filterValue">The filter value.</param>
		/// <param name="filterOptions">The options.</param>
		public Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> DeleteSet<TObject>(System.Object filterValue, Tortuga.Chain.FilterOptions filterOptions = 0)where TObject : class
		{
			return __Trait10.DeleteSet<TObject>(filterValue, filterOptions);
		}

		/// <summary>
		/// Delete multiple records using a where expression.
		/// </summary>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="whereClause">The where clause.</param>
		/// <param name="argumentValue">The argument value for the where clause.</param>
		public Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> DeleteSet(Tortuga.Chain.MySql.MySqlObjectName tableName, System.String whereClause, System.Object? argumentValue = default)
		{
			return __Trait10.DeleteSet(tableName, whereClause, argumentValue);
		}

		/// <summary>
		/// Delete multiple records using a where expression.
		/// </summary>
		/// <param name="whereClause">The where clause.</param>
		/// <param name="argumentValue">The argument value for the where clause.</param>
		public Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> DeleteSet<TObject>(System.String whereClause, System.Object? argumentValue = default)where TObject : class
		{
			return __Trait10.DeleteSet<TObject>(whereClause, argumentValue);
		}

		// Exposing trait Traits.SupportsDeleteTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>

		/// <summary>
		/// Creates a command to perform a delete operation.
		/// </summary>
		/// <param name="tableName"></param>
		/// <param name="argumentValue"></param>
		/// <param name="options"></param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TArgument> Delete<TArgument>(Tortuga.Chain.MySql.MySqlObjectName tableName, TArgument argumentValue, Tortuga.Chain.DeleteOptions options = 0)where TArgument : class
		{
			return __Trait6.Delete<TArgument>(tableName, argumentValue, options);
		}

		/// <summary>
		/// Delete an object model from the table indicated by the class's Table attribute.
		/// </summary>
		/// <typeparam name="TArgument"></typeparam>
		/// <param name="argumentValue">The argument value.</param>
		/// <param name="options">The delete options.</param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TArgument> Delete<TArgument>(TArgument argumentValue, Tortuga.Chain.DeleteOptions options = 0)where TArgument : class
		{
			return __Trait6.Delete<TArgument>(argumentValue, options);
		}

		// Exposing trait Traits.SupportsFromTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType, Tortuga.Chain.MySqlLimitOption>

		/// <summary>
		/// Creates an operation to directly query a table or view
		/// </summary>
		/// <param name="tableOrViewName"></param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.TableDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySqlLimitOption> From(Tortuga.Chain.MySql.MySqlObjectName tableOrViewName)
		{
			return __Trait11.From(tableOrViewName);
		}

		/// <summary>
		/// Creates an operation to directly query a table or view
		/// </summary>
		/// <param name="tableOrViewName"></param>
		/// <param name="whereClause"></param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.TableDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySqlLimitOption> From(Tortuga.Chain.MySql.MySqlObjectName tableOrViewName, System.String whereClause)
		{
			return __Trait11.From(tableOrViewName, whereClause);
		}

		/// <summary>
		/// Creates an operation to directly query a table or view
		/// </summary>
		/// <param name="tableOrViewName"></param>
		/// <param name="whereClause"></param>
		/// <param name="argumentValue"></param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.TableDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySqlLimitOption> From(Tortuga.Chain.MySql.MySqlObjectName tableOrViewName, System.String whereClause, System.Object argumentValue)
		{
			return __Trait11.From(tableOrViewName, whereClause, argumentValue);
		}

		/// <summary>
		/// Creates an operation to directly query a table or view
		/// </summary>
		/// <param name="tableOrViewName">Name of the table or view.</param>
		/// <param name="filterValue">The filter value.</param>
		/// <param name="filterOptions">The filter options.</param>
		/// <returns>TableDbCommandBuilder&lt;TCommand, TParameter, TLimitOption&gt;.</returns>
		public Tortuga.Chain.CommandBuilders.TableDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySqlLimitOption> From(Tortuga.Chain.MySql.MySqlObjectName tableOrViewName, System.Object filterValue, Tortuga.Chain.FilterOptions filterOptions = 0)
		{
			return __Trait11.From(tableOrViewName, filterValue, filterOptions);
		}

		/// <summary>
		/// This is used to directly query a table or view.
		/// </summary>
		/// <typeparam name="TObject"></typeparam>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.TableDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySqlLimitOption, TObject> From<TObject>()where TObject : class
		{
			return __Trait11.From<TObject>();
		}

		/// <summary>
		/// This is used to directly query a table or view.
		/// </summary>
		/// <typeparam name="TObject">The type of the object.</typeparam>
		/// <param name="whereClause">The where clause. Do not prefix this clause with "WHERE".</param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.TableDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySqlLimitOption, TObject> From<TObject>(System.String whereClause)where TObject : class
		{
			return __Trait11.From<TObject>(whereClause);
		}

		/// <summary>
		/// This is used to directly query a table or view.
		/// </summary>
		/// <typeparam name="TObject">The type of the object.</typeparam>
		/// <param name="whereClause">The where clause. Do not prefix this clause with "WHERE".</param>
		/// <param name="argumentValue">Optional argument value. Every property in the argument value must have a matching parameter in the WHERE clause</param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.TableDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySqlLimitOption, TObject> From<TObject>(System.String whereClause, System.Object argumentValue)where TObject : class
		{
			return __Trait11.From<TObject>(whereClause, argumentValue);
		}

		/// <summary>
		/// This is used to directly query a table or view.
		/// </summary>
		/// <typeparam name="TObject">The type of the object.</typeparam>
		/// <param name="filterValue">The filter value is used to generate a simple AND style WHERE clause.</param>
		/// <param name="filterOptions">The filter options.</param>
		/// <returns>TableDbCommandBuilder&lt;TCommand, TParameter, TLimitOption, TObject&gt;.</returns>
		public Tortuga.Chain.CommandBuilders.TableDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySqlLimitOption, TObject> From<TObject>(System.Object filterValue, Tortuga.Chain.FilterOptions filterOptions = 0)where TObject : class
		{
			return __Trait11.From<TObject>(filterValue, filterOptions);
		}

		// Exposing trait Traits.SupportsGetByKeyListTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>

		/// <summary>
		/// Gets a record by its primary key.
		/// </summary>
		/// <typeparam name="TObject">The type of the object. Used to determine which table will be read.</typeparam>
		/// <param name="key">The key.</param>
		/// <returns></returns>
		/// <remarks>This only works on tables that have a scalar primary key.</remarks>
		public Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TObject> GetByKey<TObject>(System.Guid key)where TObject : class
		{
			return __Trait12.GetByKey<TObject>(key);
		}

		/// <summary>
		/// Gets a record by its primary key.
		/// </summary>
		/// <typeparam name="TObject">The type of the object.</typeparam>
		/// <param name="key">The key.</param>
		/// <returns></returns>
		/// <remarks>This only works on tables that have a scalar primary key.</remarks>
		public Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TObject> GetByKey<TObject>(System.Int64 key)where TObject : class
		{
			return __Trait12.GetByKey<TObject>(key);
		}

		/// <summary>
		/// Gets a record by its primary key.
		/// </summary>
		/// <typeparam name="TObject">The type of the object.</typeparam>
		/// <param name="key">The key.</param>
		/// <returns></returns>
		/// <remarks>This only works on tables that have a scalar primary key.</remarks>
		public Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TObject> GetByKey<TObject>(System.Int16 key)where TObject : class
		{
			return __Trait12.GetByKey<TObject>(key);
		}

		/// <summary>
		/// Gets a record by its primary key.
		/// </summary>
		/// <typeparam name="TObject">The type of the object.</typeparam>
		/// <param name="key">The key.</param>
		/// <returns></returns>
		/// <remarks>This only works on tables that have a scalar primary key.</remarks>
		public Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TObject> GetByKey<TObject>(System.Int32 key)where TObject : class
		{
			return __Trait12.GetByKey<TObject>(key);
		}

		/// <summary>
		/// Gets a record by its primary key.
		/// </summary>
		/// <typeparam name="TObject">The type of the object.</typeparam>
		/// <param name="key">The key.</param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TObject> GetByKey<TObject>(System.String key)where TObject : class
		{
			return __Trait12.GetByKey<TObject>(key);
		}

		/// <summary>
		/// Gets a record by its primary key.
		/// </summary>
		/// <typeparam name="TObject">The type of the object.</typeparam>
		/// <typeparam name="TKey">The type of the key.</typeparam>
		/// <param name="key">The key.</param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TObject> GetByKey<TObject, TKey>(TKey key)where TObject : class
		{
			return __Trait12.GetByKey<TObject, TKey>(key);
		}

		/// <summary>
		/// Gets a record by its primary key.
		/// </summary>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="key">The key.</param>
		public Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> GetByKey(Tortuga.Chain.MySql.MySqlObjectName tableName, System.String key)
		{
			return __Trait12.GetByKey(tableName, key);
		}

		/// <summary>
		/// Gets a record by its primary key.
		/// </summary>
		/// <typeparam name="TKey"></typeparam>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="key">The key.</param>
		/// <remarks>This only works on tables that have a scalar primary key.</remarks>
		public Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> GetByKey<TKey>(Tortuga.Chain.MySql.MySqlObjectName tableName, TKey key)
		{
			return __Trait12.GetByKey<TKey>(tableName, key);
		}

		/// <summary>
		/// Gets a set of records by their primary key.
		/// </summary>
		/// <typeparam name="TKey"></typeparam>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="keys">The keys.</param>
		/// <returns></returns>
		/// <remarks>This only works on tables that have a scalar primary key.</remarks>
		public Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> GetByKeyList<TKey>(Tortuga.Chain.MySql.MySqlObjectName tableName, System.Collections.Generic.IEnumerable<TKey> keys)
		{
			return __Trait12.GetByKeyList<TKey>(tableName, keys);
		}

		/// <summary>
		/// Gets a set of records by a key list.
		/// </summary>
		/// <typeparam name="TObject">The type of the returned object.</typeparam>
		/// <typeparam name="TKey">The type of the key.</typeparam>
		/// <param name="keys">The keys.</param>
		public Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TObject> GetByKeyList<TObject, TKey>(System.Collections.Generic.IEnumerable<TKey> keys)where TObject : class
		{
			return __Trait12.GetByKeyList<TObject, TKey>(keys);
		}

		/// <summary>
		/// Gets a set of records by a key list.
		/// </summary>
		/// <typeparam name="TObject">The type of the returned object.</typeparam>
		/// <param name="keys">The keys.</param>
		public Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TObject> GetByKeyList<TObject>(System.Collections.Generic.IEnumerable<System.Guid> keys)where TObject : class
		{
			return __Trait12.GetByKeyList<TObject>(keys);
		}

		/// <summary>
		/// Gets a set of records by a key list.
		/// </summary>
		/// <typeparam name="TObject">The type of the returned object.</typeparam>
		/// <param name="keys">The keys.</param>
		public Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TObject> GetByKeyList<TObject>(System.Collections.Generic.IEnumerable<long> keys)where TObject : class
		{
			return __Trait12.GetByKeyList<TObject>(keys);
		}

		/// <summary>
		/// Gets a set of records by a key list.
		/// </summary>
		/// <typeparam name="TObject">The type of the returned object.</typeparam>
		/// <param name="keys">The keys.</param>
		public Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TObject> GetByKeyList<TObject>(System.Collections.Generic.IEnumerable<short> keys)where TObject : class
		{
			return __Trait12.GetByKeyList<TObject>(keys);
		}

		/// <summary>
		/// Gets a set of records by a key list.
		/// </summary>
		/// <typeparam name="TObject">The type of the returned object.</typeparam>
		/// <param name="keys">The keys.</param>
		public Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TObject> GetByKeyList<TObject>(System.Collections.Generic.IEnumerable<int> keys)where TObject : class
		{
			return __Trait12.GetByKeyList<TObject>(keys);
		}

		/// <summary>
		/// Gets a set of records by a key list.
		/// </summary>
		/// <typeparam name="TObject">The type of the returned object.</typeparam>
		/// <param name="keys">The keys.</param>
		public Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TObject> GetByKeyList<TObject>(System.Collections.Generic.IEnumerable<string> keys)where TObject : class
		{
			return __Trait12.GetByKeyList<TObject>(keys);
		}

		/// <summary>Gets a set of records by an unique key.</summary>
		/// <typeparam name="TKey">The type of the t key.</typeparam>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="keyColumn">Name of the key column. This should be a primary or unique key, but that's not enforced.</param>
		/// <param name="keys">The keys.</param>
		/// <returns>IMultipleRowDbCommandBuilder.</returns>
		[System.Obsolete(@"This will be replaced by GetByColumn")]
		[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
		public Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> GetByKeyList<TKey>(System.String tableName, System.String keyColumn, System.Collections.Generic.IEnumerable<TKey> keys)
		{
			return __Trait12.GetByKeyList<TKey>(tableName, keyColumn, keys);
		}

		// Exposing trait Traits.SupportsInsertBatchTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType, Tortuga.Chain.CommandBuilders.DbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter>>

		/// <summary>
		/// Inserts the batch of records as one operation.
		/// </summary>
		/// <typeparam name="TObject"></typeparam>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="objects">The objects to insert.</param>
		/// <param name="options">The options.</param>
		/// <returns>MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.</returns>
		public Tortuga.Chain.CommandBuilders.DbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> InsertBatch<TObject>(Tortuga.Chain.MySql.MySqlObjectName tableName, System.Collections.Generic.IEnumerable<TObject> objects, Tortuga.Chain.InsertOptions options = 0)where TObject : class
		{
			return __Trait3.InsertBatch<TObject>(tableName, objects, options);
		}

		/// <summary>
		/// Inserts the batch of records as one operation.
		/// </summary>
		/// <typeparam name="TObject"></typeparam>
		/// <param name="objects">The objects to insert.</param>
		/// <param name="options">The options.</param>
		/// <returns>MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.</returns>
		public Tortuga.Chain.CommandBuilders.DbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> InsertBatch<TObject>(System.Collections.Generic.IEnumerable<TObject> objects, Tortuga.Chain.InsertOptions options = 0)where TObject : class
		{
			return __Trait3.InsertBatch<TObject>(objects, options);
		}

		/// <summary>
		/// Performs a series of batch inserts.
		/// </summary>
		/// <typeparam name="TObject">The type of the t object.</typeparam>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="objects">The objects.</param>
		/// <param name="options">The options.</param>
		/// <returns>Tortuga.Chain.ILink&lt;System.Int32&gt;.</returns>
		/// <remarks>This operation is not atomic. It should be wrapped in a transaction.</remarks>
		public Tortuga.Chain.ILink<int> InsertMultipleBatch<TObject>(Tortuga.Chain.MySql.MySqlObjectName tableName, System.Collections.Generic.IEnumerable<TObject> objects, Tortuga.Chain.InsertOptions options = 0)where TObject : class
		{
			return __Trait3.InsertMultipleBatch<TObject>(tableName, objects, options);
		}

		/// <summary>
		/// Inserts the batch of records as one operation.
		/// </summary>
		/// <typeparam name="TObject"></typeparam>
		/// <param name="objects">The objects to insert.</param>
		/// <param name="options">The options.</param>
		/// <returns>MultipleRowDbCommandBuilder&lt;SqlCommand, SqlParameter&gt;.</returns>
		public Tortuga.Chain.ILink<int> InsertMultipleBatch<TObject>(System.Collections.Generic.IReadOnlyList<TObject> objects, Tortuga.Chain.InsertOptions options = 0)where TObject : class
		{
			return __Trait3.InsertMultipleBatch<TObject>(objects, options);
		}

		// Exposing trait Traits.SupportsInsertBulkTrait<Tortuga.Chain.MySql.CommandBuilders.MySqlInsertBulk, MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>

		/// <summary>
		/// Inserts the batch of records using bulk insert.
		/// </summary>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="dataTable">The data table.</param>
		/// <returns>TInsertBulkCommand.</returns>
		public Tortuga.Chain.MySql.CommandBuilders.MySqlInsertBulk InsertBulk(Tortuga.Chain.MySql.MySqlObjectName tableName, System.Data.DataTable dataTable)
		{
			return __Trait14.InsertBulk(tableName, dataTable);
		}

		/// <summary>
		/// Inserts the batch of records using bulk insert.
		/// </summary>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="dataReader">The data reader.</param>
		/// <returns>TInsertBulkCommand.</returns>
		public Tortuga.Chain.MySql.CommandBuilders.MySqlInsertBulk InsertBulk(Tortuga.Chain.MySql.MySqlObjectName tableName, System.Data.IDataReader dataReader)
		{
			return __Trait14.InsertBulk(tableName, dataReader);
		}

		/// <summary>
		/// Inserts the batch of records using bulk insert.
		/// </summary>
		/// <typeparam name="TObject"></typeparam>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="objects">The objects.</param>
		/// <returns>TInsertBulkCommand.</returns>
		public Tortuga.Chain.MySql.CommandBuilders.MySqlInsertBulk InsertBulk<TObject>(Tortuga.Chain.MySql.MySqlObjectName tableName, System.Collections.Generic.IEnumerable<TObject> objects)where TObject : class
		{
			return __Trait14.InsertBulk<TObject>(tableName, objects);
		}

		/// <summary>
		/// Inserts the batch of records using bulk insert.
		/// </summary>
		/// <typeparam name="TObject">The type of the object.</typeparam>
		/// <param name="dataTable">The data table.</param>
		/// <returns>
		/// TInsertBulkCommand.
		/// </returns>
		public Tortuga.Chain.MySql.CommandBuilders.MySqlInsertBulk InsertBulk<TObject>(System.Data.DataTable dataTable)where TObject : class
		{
			return __Trait14.InsertBulk<TObject>(dataTable);
		}

		/// <summary>
		/// Inserts the batch of records using bulk insert.
		/// </summary>
		/// <typeparam name="TObject">The type of the object.</typeparam>
		/// <param name="dataReader">The data reader.</param>
		/// <returns>
		/// TInsertBulkCommand.
		/// </returns>
		public Tortuga.Chain.MySql.CommandBuilders.MySqlInsertBulk InsertBulk<TObject>(System.Data.IDataReader dataReader)where TObject : class
		{
			return __Trait14.InsertBulk<TObject>(dataReader);
		}

		/// <summary>
		/// Inserts the batch of records using bulk insert.
		/// </summary>
		/// <typeparam name="TObject">The type of the object.</typeparam>
		/// <param name="objects">The objects.</param>
		/// <returns>
		/// TInsertBulkCommand.
		/// </returns>
		public Tortuga.Chain.MySql.CommandBuilders.MySqlInsertBulk InsertBulk<TObject>(System.Collections.Generic.IEnumerable<TObject> objects)where TObject : class
		{
			return __Trait14.InsertBulk<TObject>(objects);
		}

		// Exposing trait Traits.SupportsInsertTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>

		/// <summary>
		/// Inserts an object into the specified table.
		/// </summary>
		/// <typeparam name="TArgument"></typeparam>
		/// <param name="argumentValue">The argument value.</param>
		/// <param name="options">The options for how the insert occurs.</param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TArgument> Insert<TArgument>(TArgument argumentValue, Tortuga.Chain.InsertOptions options = 0)where TArgument : class
		{
			return __Trait8.Insert<TArgument>(argumentValue, options);
		}

		/// <summary>
		/// Creates an operation used to perform an insert operation.
		/// </summary>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="argumentValue">The argument value.</param>
		/// <param name="options">The options.</param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TArgument> Insert<TArgument>(Tortuga.Chain.MySql.MySqlObjectName tableName, TArgument argumentValue, Tortuga.Chain.InsertOptions options = 0)where TArgument : class
		{
			return __Trait8.Insert<TArgument>(tableName, argumentValue, options);
		}

		// Exposing trait Traits.SupportsProcedureTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>

		/// <summary>
		/// Loads a procedure definition
		/// </summary>
		/// <param name="procedureName">Name of the procedure.</param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.ProcedureDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> Procedure(Tortuga.Chain.MySql.MySqlObjectName procedureName)
		{
			return __Trait16.Procedure(procedureName);
		}

		/// <summary>
		/// Loads a procedure definition and populates it using the parameter object.
		/// </summary>
		/// <param name="procedureName">Name of the procedure.</param>
		/// <param name="argumentValue">The argument value.</param>
		/// <returns></returns>
		/// <remarks>
		/// The procedure's definition is loaded from the database and used to determine which properties on the parameter object to use.
		/// </remarks>
		public Tortuga.Chain.CommandBuilders.ProcedureDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> Procedure(Tortuga.Chain.MySql.MySqlObjectName procedureName, System.Object argumentValue)
		{
			return __Trait16.Procedure(procedureName, argumentValue);
		}

		// Exposing trait Traits.SupportsScalarFunctionTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>

		/// <summary>
		/// This is used to query a scalar function.
		/// </summary>
		/// <param name="scalarFunctionName">Name of the scalar function.</param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> ScalarFunction(Tortuga.Chain.MySql.MySqlObjectName scalarFunctionName)
		{
			return __Trait15.ScalarFunction(scalarFunctionName);
		}

		/// <summary>
		/// This is used to query a scalar function.
		/// </summary>
		/// <param name="scalarFunctionName">Name of the scalar function.</param>
		/// <param name="functionArgumentValue">The function argument.</param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> ScalarFunction(Tortuga.Chain.MySql.MySqlObjectName scalarFunctionName, System.Object functionArgumentValue)
		{
			return __Trait15.ScalarFunction(scalarFunctionName, functionArgumentValue);
		}

		// Exposing trait Traits.SupportsSqlQueriesTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter>

		/// <summary>
		/// Creates a operation based on a raw SQL statement.
		/// </summary>
		/// <param name="sqlStatement">The SQL statement.</param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.MultipleTableDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> Sql(System.String sqlStatement)
		{
			return __Trait2.Sql(sqlStatement);
		}

		/// <summary>
		/// Creates a operation based on a raw SQL statement.
		/// </summary>
		/// <param name="sqlStatement">The SQL statement.</param>
		/// <param name="argumentValue">The argument value.</param>
		/// <returns>SqlServerSqlCall.</returns>
		public Tortuga.Chain.CommandBuilders.MultipleTableDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> Sql(System.String sqlStatement, System.Object argumentValue)
		{
			return __Trait2.Sql(sqlStatement, argumentValue);
		}

		// Exposing trait Traits.SupportsTruncateTrait<Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>

		/// <summary>Truncates the specified table.</summary>
		/// <param name="tableName">Name of the table to Truncate.</param>
		/// <returns>The number of rows deleted or null if the database doesn't provide that information.</returns>
		public Tortuga.Chain.ILink<int?> Truncate(Tortuga.Chain.MySql.MySqlObjectName tableName)
		{
			return __Trait1.Truncate(tableName);
		}

		/// <summary>Truncates the specified table.</summary>
		/// <typeparam name="TObject">This class used to determine which table to Truncate</typeparam>
		/// <returns>The number of rows deleted or null if the database doesn't provide that information.</returns>
		public Tortuga.Chain.ILink<int?> Truncate<TObject>()where TObject : class
		{
			return __Trait1.Truncate<TObject>();
		}

		// Exposing trait Traits.SupportsUpdateByKeyListTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>

		/// <summary>
		/// Update a record by its primary key.
		/// </summary>
		/// <typeparam name="TArgument">The type of the t argument.</typeparam>
		/// <typeparam name="TKey"></typeparam>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="newValues">The new values to use.</param>
		/// <param name="key">The key.</param>
		/// <param name="options">The options.</param>
		/// <returns>MultipleRowDbCommandBuilder&lt;AbstractCommand, AbstractParameter&gt;.</returns>
		public Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> UpdateByKey<TArgument, TKey>(Tortuga.Chain.MySql.MySqlObjectName tableName, TArgument newValues, TKey key, Tortuga.Chain.UpdateOptions options = 0)where TKey : struct
		{
			return __Trait7.UpdateByKey<TArgument, TKey>(tableName, newValues, key, options);
		}

		/// <summary>
		/// Update a record by its primary key.
		/// </summary>
		/// <typeparam name="TArgument">The type of the t argument.</typeparam>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="newValues">The new values to use.</param>
		/// <param name="key">The key.</param>
		/// <param name="options">The options.</param>
		/// <returns>MultipleRowDbCommandBuilder&lt;OleDbCommand, OleDbParameter&gt;.</returns>
		public Tortuga.Chain.CommandBuilders.SingleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> UpdateByKey<TArgument>(Tortuga.Chain.MySql.MySqlObjectName tableName, TArgument newValues, System.String key, Tortuga.Chain.UpdateOptions options = 0)
		{
			return __Trait7.UpdateByKey<TArgument>(tableName, newValues, key, options);
		}

		/// <summary>
		/// Update multiple rows by key.
		/// </summary>
		/// <typeparam name="TArgument">The type of the t argument.</typeparam>
		/// <typeparam name="TKey">The type of the t key.</typeparam>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="newValues">The new values to use.</param>
		/// <param name="keys">The keys.</param>
		/// <param name="options">Update options.</param>
		/// <returns>MultipleRowDbCommandBuilder&lt;OleDbCommand, OleDbParameter&gt;.</returns>
		/// <exception cref="T:Tortuga.Chain.MappingException"></exception>
		public Tortuga.Chain.CommandBuilders.MultipleRowDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> UpdateByKeyList<TArgument, TKey>(Tortuga.Chain.MySql.MySqlObjectName tableName, TArgument newValues, System.Collections.Generic.IEnumerable<TKey> keys, Tortuga.Chain.UpdateOptions options = 0)
		{
			return __Trait7.UpdateByKeyList<TArgument, TKey>(tableName, newValues, keys, options);
		}

		// Exposing trait Traits.SupportsUpdateSet<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>

		/// <summary>
		/// Update multiple records using an update expression.
		/// </summary>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="updateExpression">The update expression.</param>
		/// <param name="updateArgumentValue">The argument value.</param>
		/// <param name="options">The update options.</param>
		/// <remarks>Use .WithFilter to apply a WHERE clause.</remarks>
		public Tortuga.Chain.CommandBuilders.IUpdateSetDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> UpdateSet(Tortuga.Chain.MySql.MySqlObjectName tableName, System.String updateExpression, System.Object? updateArgumentValue, Tortuga.Chain.UpdateOptions options = 0)
		{
			return __Trait9.UpdateSet(tableName, updateExpression, updateArgumentValue, options);
		}

		/// <summary>
		/// Update multiple records using an update value.
		/// </summary>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="newValues">The new values to use.</param>
		/// <param name="options">The options.</param>
		/// <remarks>Use .WithFilter to apply a WHERE clause.</remarks>
		public Tortuga.Chain.CommandBuilders.IUpdateSetDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> UpdateSet(Tortuga.Chain.MySql.MySqlObjectName tableName, System.Object newValues, Tortuga.Chain.UpdateOptions options = 0)
		{
			return __Trait9.UpdateSet(tableName, newValues, options);
		}

		/// <summary>
		/// Update multiple records using an update expression.
		/// </summary>
		/// <param name="tableName">Name of the table.</param>
		/// <param name="updateExpression">The update expression.</param>
		/// <param name="options">The update options.</param>
		/// <remarks>Use .WithFilter to apply a WHERE clause.</remarks>
		public Tortuga.Chain.CommandBuilders.IUpdateSetDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> UpdateSet(Tortuga.Chain.MySql.MySqlObjectName tableName, System.String updateExpression, Tortuga.Chain.UpdateOptions options = 0)
		{
			return __Trait9.UpdateSet(tableName, updateExpression, options);
		}

		/// <summary>
		/// Update multiple records using an update expression.
		/// </summary>
		/// <typeparam name="TObject">Class used to determine the table name.</typeparam>
		/// <param name="updateExpression">The update expression.</param>
		/// <param name="updateArgumentValue">The argument for the update expression.</param>
		/// <param name="options">The update options.</param>
		/// <remarks>Use .WithFilter to apply a WHERE clause.</remarks>
		public Tortuga.Chain.CommandBuilders.IUpdateSetDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> UpdateSet<TObject>(System.String updateExpression, System.Object updateArgumentValue, Tortuga.Chain.UpdateOptions options = 0)
		{
			return __Trait9.UpdateSet<TObject>(updateExpression, updateArgumentValue, options);
		}

		/// <summary>
		/// Update multiple records using an update value.
		/// </summary>
		/// <typeparam name="TObject">Class used to determine the table name.</typeparam>
		/// <param name="newValues">The new values to use.</param>
		/// <param name="options">The options.</param>
		/// <remarks>Use .WithFilter to apply a WHERE clause.</remarks>
		public Tortuga.Chain.CommandBuilders.IUpdateSetDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> UpdateSet<TObject>(System.Object newValues, Tortuga.Chain.UpdateOptions options = 0)
		{
			return __Trait9.UpdateSet<TObject>(newValues, options);
		}

		/// <summary>
		/// Update multiple records using an update expression.
		/// </summary>
		/// <typeparam name="TObject">Class used to determine the table name.</typeparam>
		/// <param name="updateExpression">The update expression.</param>
		/// <param name="options">The update options.</param>
		/// <remarks>Use .WithFilter to apply a WHERE clause.</remarks>
		public Tortuga.Chain.CommandBuilders.IUpdateSetDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> UpdateSet<TObject>(System.String updateExpression, Tortuga.Chain.UpdateOptions options = 0)
		{
			return __Trait9.UpdateSet<TObject>(updateExpression, options);
		}

		// Exposing trait Traits.SupportsUpdateTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>

		/// <summary>
		/// Update an object in the specified table.
		/// </summary>
		/// <typeparam name="TArgument"></typeparam>
		/// <param name="argumentValue">The argument value.</param>
		/// <param name="options">The update options.</param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TArgument> Update<TArgument>(TArgument argumentValue, Tortuga.Chain.UpdateOptions options = 0)where TArgument : class
		{
			return __Trait5.Update<TArgument>(argumentValue, options);
		}

		/// <summary>
		/// Update an object in the specified table.
		/// </summary>
		/// <param name="tableName"></param>
		/// <param name="argumentValue"></param>
		/// <param name="options"></param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TArgument> Update<TArgument>(Tortuga.Chain.MySql.MySqlObjectName tableName, TArgument argumentValue, Tortuga.Chain.UpdateOptions options = 0)where TArgument : class
		{
			return __Trait5.Update<TArgument>(tableName, argumentValue, options);
		}

		// Exposing trait Traits.SupportsUpsertTrait<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, Tortuga.Chain.MySql.MySqlObjectName, MySqlConnector.MySqlDbType>

		/// <summary>
		/// Creates a operation used to perform an "upsert" operation.
		/// </summary>
		/// <param name="tableName"></param>
		/// <param name="argumentValue"></param>
		/// <param name="options"></param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TArgument> Upsert<TArgument>(Tortuga.Chain.MySql.MySqlObjectName tableName, TArgument argumentValue, Tortuga.Chain.UpsertOptions options = 0)where TArgument : class
		{
			return __Trait13.Upsert<TArgument>(tableName, argumentValue, options);
		}

		/// <summary>
		/// Perform an insert or update operation as appropriate.
		/// </summary>
		/// <typeparam name="TArgument"></typeparam>
		/// <param name="argumentValue">The argument value.</param>
		/// <param name="options">The options for how the insert/update occurs.</param>
		/// <returns></returns>
		public Tortuga.Chain.CommandBuilders.ObjectDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter, TArgument> Upsert<TArgument>(TArgument argumentValue, Tortuga.Chain.UpsertOptions options = 0)where TArgument : class
		{
			return __Trait13.Upsert<TArgument>(argumentValue, options);
		}

		private partial Tortuga.Chain.ILink<int?> OnDeleteAll(Tortuga.Chain.MySql.MySqlObjectName tableName );

		private partial Tortuga.Chain.CommandBuilders.ProcedureDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> OnProcedure(Tortuga.Chain.MySql.MySqlObjectName procedureName, System.Object? argumentValue );

		private partial Tortuga.Chain.CommandBuilders.ScalarDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> OnScalarFunction(Tortuga.Chain.MySql.MySqlObjectName scalarFunctionName, System.Object? argumentValue );

		private partial Tortuga.Chain.CommandBuilders.MultipleTableDbCommandBuilder<MySqlConnector.MySqlCommand, MySqlConnector.MySqlParameter> OnSql(System.String sqlStatement, System.Object? argumentValue );

		private partial Tortuga.Chain.ILink<int?> OnTruncate(Tortuga.Chain.MySql.MySqlObjectName tableName );

		private void __RegisterTraits()
		{
			__TraitsRegistered = true;
			__Trait0.OnDeleteAll = OnDeleteAll;
			__Trait0.DataSource = this;
			__Trait1.OnTruncate = OnTruncate;
			__Trait1.DataSource = this;
			__Trait2.OnSql = OnSql;
			__Trait3.DataSource = this;
			__Trait4.DataSource = this;
			__Trait5.DataSource = this;
			__Trait6.DataSource = this;
			__Trait7.DataSource = this;
			__Trait8.DataSource = this;
			__Trait9.DataSource = this;
			__Trait10.DataSource = this;
			__Trait11.DataSource = this;
			__Trait12.DataSource = this;
			__Trait13.DataSource = this;
			__Trait14.DataSource = this;
			__Trait15.OnScalarFunction = OnScalarFunction;
			__Trait15.DataSource = this;
			__Trait16.OnProcedure = OnProcedure;
			__Trait16.DataSource = this;
		}

	}
}
